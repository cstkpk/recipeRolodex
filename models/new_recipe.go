// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewRecipe new recipe
//
// swagger:model NewRecipe
type NewRecipe struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// ingredient list
	// Required: true
	IngredientList []string `json:"ingredientList"`

	// link
	// Required: true
	Link *string `json:"link"`

	// season
	// Required: true
	Season *string `json:"season"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this new recipe
func (m *NewRecipe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngredientList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewRecipe) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *NewRecipe) validateIngredientList(formats strfmt.Registry) error {

	if err := validate.Required("ingredientList", "body", m.IngredientList); err != nil {
		return err
	}

	return nil
}

func (m *NewRecipe) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *NewRecipe) validateSeason(formats strfmt.Registry) error {

	if err := validate.Required("season", "body", m.Season); err != nil {
		return err
	}

	return nil
}

func (m *NewRecipe) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewRecipe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewRecipe) UnmarshalBinary(b []byte) error {
	var res NewRecipe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
