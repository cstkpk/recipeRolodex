// Code generated by go-swagger; DO NOT EDIT.

package recipes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRecipesHandlerFunc turns a function with the right signature into a get recipes handler
type GetRecipesHandlerFunc func(GetRecipesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRecipesHandlerFunc) Handle(params GetRecipesParams) middleware.Responder {
	return fn(params)
}

// GetRecipesHandler interface for that can handle valid get recipes params
type GetRecipesHandler interface {
	Handle(GetRecipesParams) middleware.Responder
}

// NewGetRecipes creates a new http.Handler for the get recipes operation
func NewGetRecipes(ctx *middleware.Context, handler GetRecipesHandler) *GetRecipes {
	return &GetRecipes{Context: ctx, Handler: handler}
}

/*GetRecipes swagger:route GET /recipes recipes getRecipes

get a list of recipes

Retrieve a list of recipes based on the user-generated query


*/
type GetRecipes struct {
	Context *middleware.Context
	Handler GetRecipesHandler
}

func (o *GetRecipes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRecipesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
