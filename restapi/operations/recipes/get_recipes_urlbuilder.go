// Code generated by go-swagger; DO NOT EDIT.

package recipes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
)

// GetRecipesURL generates an URL for the get recipes operation
type GetRecipesURL struct {
	Ingredient1 *string
	Ingredient2 *string
	Ingredient3 *string
	Season      *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetRecipesURL) WithBasePath(bp string) *GetRecipesURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetRecipesURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetRecipesURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/recipes"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/rolodex"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var ingredient1Q string
	if o.Ingredient1 != nil {
		ingredient1Q = *o.Ingredient1
	}
	if ingredient1Q != "" {
		qs.Set("ingredient1", ingredient1Q)
	}

	var ingredient2Q string
	if o.Ingredient2 != nil {
		ingredient2Q = *o.Ingredient2
	}
	if ingredient2Q != "" {
		qs.Set("ingredient2", ingredient2Q)
	}

	var ingredient3Q string
	if o.Ingredient3 != nil {
		ingredient3Q = *o.Ingredient3
	}
	if ingredient3Q != "" {
		qs.Set("ingredient3", ingredient3Q)
	}

	var seasonQ string
	if o.Season != nil {
		seasonQ = *o.Season
	}
	if seasonQ != "" {
		qs.Set("season", seasonQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetRecipesURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetRecipesURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetRecipesURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetRecipesURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetRecipesURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetRecipesURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
