// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostRecipeHandlerFunc turns a function with the right signature into a post recipe handler
type PostRecipeHandlerFunc func(PostRecipeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRecipeHandlerFunc) Handle(params PostRecipeParams) middleware.Responder {
	return fn(params)
}

// PostRecipeHandler interface for that can handle valid post recipe params
type PostRecipeHandler interface {
	Handle(PostRecipeParams) middleware.Responder
}

// NewPostRecipe creates a new http.Handler for the post recipe operation
func NewPostRecipe(ctx *middleware.Context, handler PostRecipeHandler) *PostRecipe {
	return &PostRecipe{Context: ctx, Handler: handler}
}

/*PostRecipe swagger:route POST /recipe recipe postRecipe

create a new recipe

Add a new set of recipe details to the database


*/
type PostRecipe struct {
	Context *middleware.Context
	Handler PostRecipeHandler
}

func (o *PostRecipe) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostRecipeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
