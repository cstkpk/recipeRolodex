// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/cstkpk/recipeRolodex/models"
)

// GetRecipeOKCode is the HTTP code returned for type GetRecipeOK
const GetRecipeOKCode int = 200

/*GetRecipeOK successful

swagger:response getRecipeOK
*/
type GetRecipeOK struct {

	/*
	  In: Body
	*/
	Payload *models.Recipe `json:"body,omitempty"`
}

// NewGetRecipeOK creates GetRecipeOK with default headers values
func NewGetRecipeOK() *GetRecipeOK {

	return &GetRecipeOK{}
}

// WithPayload adds the payload to the get recipe o k response
func (o *GetRecipeOK) WithPayload(payload *models.Recipe) *GetRecipeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recipe o k response
func (o *GetRecipeOK) SetPayload(payload *models.Recipe) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecipeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRecipeBadRequestCode is the HTTP code returned for type GetRecipeBadRequest
const GetRecipeBadRequestCode int = 400

/*GetRecipeBadRequest bad request

swagger:response getRecipeBadRequest
*/
type GetRecipeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ReturnCode `json:"body,omitempty"`
}

// NewGetRecipeBadRequest creates GetRecipeBadRequest with default headers values
func NewGetRecipeBadRequest() *GetRecipeBadRequest {

	return &GetRecipeBadRequest{}
}

// WithPayload adds the payload to the get recipe bad request response
func (o *GetRecipeBadRequest) WithPayload(payload *models.ReturnCode) *GetRecipeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recipe bad request response
func (o *GetRecipeBadRequest) SetPayload(payload *models.ReturnCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecipeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRecipeNotFoundCode is the HTTP code returned for type GetRecipeNotFound
const GetRecipeNotFoundCode int = 404

/*GetRecipeNotFound not found

swagger:response getRecipeNotFound
*/
type GetRecipeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ReturnCode `json:"body,omitempty"`
}

// NewGetRecipeNotFound creates GetRecipeNotFound with default headers values
func NewGetRecipeNotFound() *GetRecipeNotFound {

	return &GetRecipeNotFound{}
}

// WithPayload adds the payload to the get recipe not found response
func (o *GetRecipeNotFound) WithPayload(payload *models.ReturnCode) *GetRecipeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recipe not found response
func (o *GetRecipeNotFound) SetPayload(payload *models.ReturnCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecipeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRecipeInternalServerErrorCode is the HTTP code returned for type GetRecipeInternalServerError
const GetRecipeInternalServerErrorCode int = 500

/*GetRecipeInternalServerError internal service error

swagger:response getRecipeInternalServerError
*/
type GetRecipeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ReturnCode `json:"body,omitempty"`
}

// NewGetRecipeInternalServerError creates GetRecipeInternalServerError with default headers values
func NewGetRecipeInternalServerError() *GetRecipeInternalServerError {

	return &GetRecipeInternalServerError{}
}

// WithPayload adds the payload to the get recipe internal server error response
func (o *GetRecipeInternalServerError) WithPayload(payload *models.ReturnCode) *GetRecipeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recipe internal server error response
func (o *GetRecipeInternalServerError) SetPayload(payload *models.ReturnCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecipeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRecipeDefault unexpected error

swagger:response getRecipeDefault
*/
type GetRecipeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ReturnCode `json:"body,omitempty"`
}

// NewGetRecipeDefault creates GetRecipeDefault with default headers values
func NewGetRecipeDefault(code int) *GetRecipeDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRecipeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get recipe default response
func (o *GetRecipeDefault) WithStatusCode(code int) *GetRecipeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get recipe default response
func (o *GetRecipeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get recipe default response
func (o *GetRecipeDefault) WithPayload(payload *models.ReturnCode) *GetRecipeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recipe default response
func (o *GetRecipeDefault) SetPayload(payload *models.ReturnCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecipeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
